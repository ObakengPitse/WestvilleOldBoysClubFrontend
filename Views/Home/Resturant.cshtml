<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>McBite — Food Ordering</title>
    <!-- Bootstrap 5 CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .food-card img {
            height: 160px;
            object-fit: cover;
        }

        .category-btn.active {
            font-weight: 700;
        }

        .badge-r {
            background: #ffcc00;
            color: #000;
        }
    </style>
</head>
<body>
    <!-- NAVBAR -->
    <nav class="navbar navbar-expand-lg navbar-dark" style="background-color:#1a3e6a !important">
        <div class="container">
            <a class="navbar-brand fw-bold" asp-controller="Home" asp-action="Index">Home</a>
            <button class="btn btn-outline-light" id="viewCartBtn">Cart (<span id="cartCount">0</span>)</button>
        </div>
    </nav>

    <!-- MAIN -->
    <main class="container py-4">
        <div class="row mb-3 align-items-center">
            <div class="col-md-6">
                <h2 class="mb-0">Order your favourite meals</h2>
                <p class="text-muted mb-0">Burgers, wraps, drinks — fast, tasty and delivered fast.</p>
            </div>
            <div class="col-md-6 text-md-end mt-3 mt-md-0">
                <div class="input-group w-75 ms-auto">
                    <span class="input-group-text">Search</span>
                    <input id="searchInput" class="form-control" placeholder="Search food by name or description">
                </div>
            </div>
        </div>

        <!-- Categories -->
        <div id="categories" class="mb-3"></div>

        <!-- Food Grid -->
        <div id="foodsGrid" class="row g-3"></div>

        <!-- API fallback notice -->
        <div id="apiNotice" class="mt-3 text-muted small"></div>
    </main>

    <!-- CART / CHECKOUT MODAL -->
    <div class="modal fade" id="cartModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Your Cart</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="cartItems"></div>
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div>
                            <strong>Subtotal:</strong> <span id="subtotal">R 0.00</span>
                        </div>
                        <div>
                            <button id="clearCartBtn" class="btn btn-outline-secondary btn-sm me-2">Clear</button>
                            <button id="checkoutBtn" class="btn btn-primary">Checkout</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- CHECKOUT FORM MODAL -->
    <div class="modal fade" id="checkoutModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Checkout</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="checkoutForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Full name</label>
                                <input type="text" class="form-control" id="fullName" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone number</label>
                                <input type="tel" class="form-control" id="phone" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Payment method</label>
                                <select id="paymentMethod" class="form-select" required>
                                    <option value="card">Card</option>
                                    <option value="eft">EFT</option>
                                    <option value="cash">Cash on Collection</option>
                                </select>
                            </div>
                        </div>

                        <h6 class="mt-3">Order summary</h6>
                        <div id="checkoutSummary" class="mb-3"></div>

                        <div class="d-flex justify-content-between align-items-center">
                            <strong>Total:</strong> <h4 id="checkoutTotal">R 0.00</h4>
                        </div>

                        <div class="mt-3 text-end">
                            <button type="submit" class="btn btn-success">Place order</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;">
        <div id="liveToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body" id="toastMessage">Order placed successfully!</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS + Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // ----- CONFIG -----
        // Replace with your real API endpoints
        const API = {
          getFoods: 'https://wob-soccer-website.onrender.com/food/api/v1/get-all-items',          // GET -> returns array of food objects
          placeOrder: 'https://wob-soccer-website.onrender.com/orders/api/v1/save-order'        // POST -> accepts order payload
        };

        // ----- STATE -----
        let foods = [];
        let categories = new Set();
        let selectedCategory = 'All';
        let cart = JSON.parse(localStorage.getItem('mc_cart') || '[]');

        // ----- UTIL -----
        const R = v => 'R ' + Number(v).toFixed(2);
        const byId = id => document.getElementById(id);

        // ----- INITIALISE UI ELEMENTS -----
        const foodsGrid = byId('foodsGrid');
        const categoriesEl = byId('categories');
        const cartCount = byId('cartCount');
        const apiNotice = byId('apiNotice');

        const cartModal = new bootstrap.Modal(byId('cartModal'));
        const checkoutModal = new bootstrap.Modal(byId('checkoutModal'));

        // ----- FETCH FOODS -----
        async function fetchFoods() {
          try {
              const res = await fetch(API.getFoods, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({}) // Empty payload
            });
            if (!res.ok) throw new Error('Network response was not ok');
            foods = await res.json();
            apiNotice.textContent = '';
          } catch (err) {
            console.warn('Failed to fetch foods from API, using fallback mock data:', err);
            apiNotice.textContent = 'Could not contact API. Showing mock data — replace API endpoints in the script with your real endpoints.';
            foods = getMockFoods();
          }
          buildCategories();
          renderFoods();
          updateCartCount();
        }

        function getMockFoods() {
          return [
            { id:1, name:'Big Mac Classic', price:59.99, imageUrl:'https://picsum.photos/seed/bigmac/400/300', description:'Two beef patties, lettuce, special sauce.', category:'Burgers' },
            { id:2, name:'Crispy Chicken Burger', price:49.50, imageUrl:'https://picsum.photos/seed/chicken/400/300', description:'Crispy coated chicken fillet with mayo.', category:'Burgers' },
            { id:3, name:'Large Fries', price:25.00, imageUrl:'https://picsum.photos/seed/fries/400/300', description:'Golden and hot.', category:'Sides' },
            { id:4, name:'Coca-Cola 500ml', price:19.99, imageUrl:'https://picsum.photos/seed/coke/400/300', description:'Chilled soft drink.', category:'Drinks' },
            { id:5, name:'Chocolate Sundae', price:15.00, imageUrl:'https://picsum.photos/seed/sundae/400/300', description:'Creamy chocolate sundae.', category:'Desserts' }
          ];
        }

        // ----- CATEGORIES -----
        function buildCategories() {
          categories = new Set(foods.map(f => f.category || 'Uncategorized'));
          renderCategoryButtons();
        }

        function renderCategoryButtons() {
          const allBtn = `<button class="btn btn-outline-dark me-2 category-btn" data-cat="All">All</button>`;
          const catBtns = Array.from(categories).map(c => `<button class="btn btn-outline-dark me-2 category-btn" data-cat="${escapeHtml(c)}">${escapeHtml(c)}</button>`).join('');
          categoriesEl.innerHTML = allBtn + catBtns;
          // attach listeners
          categoriesEl.querySelectorAll('.category-btn').forEach(b => {
            b.addEventListener('click', () => {
              selectedCategory = b.getAttribute('data-cat');
              categoriesEl.querySelectorAll('.category-btn').forEach(x => x.classList.remove('active'));
              b.classList.add('active');
              renderFoods();
            });
          });
          // default select All
          const first = categoriesEl.querySelector('[data-cat="All"]');
          if (first) first.classList.add('active');
        }

        // ----- RENDER FOODS -----
        function renderFoods() {
          const q = byId('searchInput').value.trim().toLowerCase();
          const filtered = foods.filter(f => {
            if (selectedCategory !== 'All' && f.category !== selectedCategory) return false;
            if (!q) return true;
            return (f.name + ' ' + (f.description || '')).toLowerCase().includes(q);
          });
          if (!filtered.length) foodsGrid.innerHTML = '<div class="col-12"><p class="text-muted">No items found.</p></div>';
          else foodsGrid.innerHTML = filtered.map(f => foodCardHtml(f)).join('');
          // attach add-to-cart listeners
          document.querySelectorAll('.add-to-cart').forEach(btn => {
            btn.addEventListener('click', () => {
              const id = Number(btn.getAttribute('data-id'));
              const food = foods.find(x => x.id === id);
              addToCart(food);
            });
          });
        }

        function foodCardHtml(f) {
          return `
            <div class="col-sm-6 col-md-4 col-lg-3">
              <div class="card food-card h-100 shadow-sm">
                <img src="${escapeHtml(f.imageUrl || '')}" class="card-img-top" alt="${escapeHtml(f.name)}">
                <div class="card-body d-flex flex-column">
                  <h6 class="card-title mb-1">${escapeHtml(f.name)}</h6>
                  <p class="card-text small text-muted mb-2">${escapeHtml(f.description || '')}</p>
                  <div class="mt-auto d-flex justify-content-between align-items-center">
                    <div>
                      <span class="fw-bold">${R(f.price)}</span>
                    </div>
                    <button class="btn btn-sm btn-outline-primary add-to-cart" data-id="${f.id}">Add</button>
                  </div>
                </div>
              </div>
            </div>
          `;
        }

        // ----- CART MANAGEMENT -----
        function addToCart(food) {
          const existing = cart.find(i => i.id === food.id);
          if (existing) existing.qty++;
          else cart.push({ id: food.id, name: food.name, price: food.price, qty: 1 });
          saveCart();
          updateCartCount();
          showToast(`${food.name} added to cart`);
        }

        function saveCart() {
          localStorage.setItem('mc_cart', JSON.stringify(cart));
        }

        function updateCartCount() {
          const count = cart.reduce((s, i) => s + i.qty, 0);
          cartCount.textContent = count;
        }

        function renderCart() {
          const el = byId('cartItems');
          if (!cart.length) {
            el.innerHTML = '<p class="text-muted">Your cart is empty.</p>';
            byId('subtotal').textContent = R(0);
            return;
          }
          el.innerHTML = cart.map(item => `
            <div class="d-flex align-items-center mb-2">
              <div class="me-3 flex-shrink-0" style="width:48px;">
                <div class="bg-light border rounded-2 p-1 text-center">x${item.qty}</div>
              </div>
              <div class="flex-grow-1">
                <div class="fw-semibold">${escapeHtml(item.name)}</div>
                <div class="text-muted small">${R(item.price)} each</div>
              </div>
              <div class="ms-3 text-end">
                <div class="fw-semibold">${R(item.price * item.qty)}</div>
                <div class="mt-1">
                  <button class="btn btn-sm btn-outline-secondary me-1 change-qty" data-id="${item.id}" data-op="-">-</button>
                  <button class="btn btn-sm btn-outline-secondary change-qty" data-id="${item.id}" data-op="+">+</button>
                  <button class="btn btn-sm btn-link text-danger ms-2 remove-item" data-id="${item.id}">Remove</button>
                </div>
              </div>
            </div>
          `).join('');

          // attach qty buttons
          el.querySelectorAll('.change-qty').forEach(b => b.addEventListener('click', () => {
            const id = Number(b.getAttribute('data-id'));
            const op = b.getAttribute('data-op');
            const it = cart.find(x => x.id === id);
            if (!it) return;
            if (op === '+') it.qty++;
            else it.qty = Math.max(0, it.qty - 1);
            if (it.qty === 0) cart = cart.filter(x => x.id !== id);
            saveCart(); renderCart(); updateCartCount();
          }));

          // remove
          el.querySelectorAll('.remove-item').forEach(b => b.addEventListener('click', () => {
            const id = Number(b.getAttribute('data-id'));
            cart = cart.filter(x => x.id !== id);
            saveCart(); renderCart(); updateCartCount();
          }));

          const subtotalValue = cart.reduce((s, i) => s + i.qty * i.price, 0);
          byId('subtotal').textContent = R(subtotalValue);
        }

        // ----- CHECKOUT -----
        function openCheckout() {
          if (!cart.length) { showToast('Cart is empty'); return; }
          // populate summary
          const summary = byId('checkoutSummary');
          summary.innerHTML = cart.map(i => `<div class="d-flex justify-content-between"><div>${escapeHtml(i.name)} x ${i.qty}</div><div>${R(i.price * i.qty)}</div></div>`).join('');
          byId('checkoutTotal').textContent = R(cart.reduce((s, i) => s + i.price * i.qty, 0));
          cartModal.hide();
          checkoutModal.show();
        }

        async function placeOrder(payload) {
          try {
            const res = await fetch(API.placeOrder, {
              method: 'POST',
              headers: { 'Content-Type':'application/json' },
              body: JSON.stringify(payload)
            });
            if (!res.ok) throw new Error('Order endpoint returned ' + res.status);
            const data = await res.json();
            // success
            cart = [];
            saveCart();
            updateCartCount();
            checkoutModal.hide();
            showToast('Order placed successfully — order id: ' + (data.id || 'n/a'));
          } catch (err) {
            console.error('Place order failed', err);
            showToast('Failed to place order. Check console and API endpoints.');
          }
        }

        // ----- EVENTS -----
        document.addEventListener('DOMContentLoaded', () => {
          fetchFoods();

          byId('viewCartBtn').addEventListener('click', () => { renderCart(); cartModal.show(); });
          byId('clearCartBtn').addEventListener('click', () => { cart = []; saveCart(); renderCart(); updateCartCount(); });
          byId('checkoutBtn').addEventListener('click', openCheckout);

          byId('searchInput').addEventListener('input', () => renderFoods());

          // checkout form submit
          byId('checkoutForm').addEventListener('submit', e => {
            e.preventDefault();
            const payload = {
              fullName: byId('fullName').value.trim(),
              email: byId('email').value.trim(),
              phone: byId('phone').value.trim(),
              paymentMethod: byId('paymentMethod').value,
              items: cart.map(i => ({ id: i.id, name: i.name, qty: i.qty, price: i.price })),
              total: cart.reduce((s, i) => s + i.qty * i.price, 0),
              createdAt: new Date().toISOString()
            };
            placeOrder(payload);
          });
        });

        // ----- SMALL HELPERS -----
        function escapeHtml(str) {
          if (!str && str !== 0) return '';
          return String(str).replace(/[&<>"']/g, s => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":"&#39;"})[s]);
        }

        function showToast(msg) {
          // simple toast using alert (keeps code small). You can replace with custom toast UI.
          const t = document.createElement('div');
          t.className = 'position-fixed bottom-0 end-0 p-3';
          t.style.zIndex = 1080;
          t.innerHTML = `<div class="toast show"><div class="toast-body">${escapeHtml(msg)}</div></div>`;
          document.body.appendChild(t);
          setTimeout(() => t.remove(), 2500);
        }

        //Toast funtion
        function showToast(message, type = 'success') {
          const toastEl = document.getElementById('liveToast');
          const toastBody = document.getElementById('toastMessage');

          // Change color based on type
          const bgClass = type === 'success' ? 'bg-success' :
                          type === 'error' ? 'bg-danger' :
                          type === 'warning' ? 'bg-warning text-dark' : 'bg-primary';

          // Reset and set color class
          toastEl.className = `toast align-items-center text-white border-0 ${bgClass}`;

          toastBody.textContent = message;

          // Bootstrap toast show
          const toast = new bootstrap.Toast(toastEl, { delay: 3000 });
          toast.show();
        }


    </script>
</body>
</html>
