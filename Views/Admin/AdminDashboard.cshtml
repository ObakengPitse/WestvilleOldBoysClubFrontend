@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Online Grocery Store</title>
  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 
</head>
<body>
  <!-- Sidebar -->
  <div class="sidebar p-3" id="sidebar">
    <div class="text-center mb-4">
      <h4>Admin Dashboard</h4>
      <hr class="bg-light">
    </div>
    <ul class="nav flex-column">
        <li class="nav-item">
        <a class="nav-link" href="#" data-section="admin">
          <i class="fas fa-user-shield"></i> Admin
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link active" href="#" data-section="customers">
          <i class="fas fa-users"></i> Customers
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#" data-section="products">
          <i class="fas fa-box-open"></i> Products
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#" data-section="orders">
          <i class="fas fa-shopping-cart"></i> Orders
        </a>
      </li>
      <li class="nav-item mt-3">
                <a id="logoutBtn" class="nav-link text-danger">
          <i class="fas fa-sign-out-alt"></i> Logout
        </a>
      </li>
    </ul>
  </div>

  <!-- Main Content -->
  <div class="main-content" id="mainContent">
    
    <!-- Admin Section -->
    <div class="d-none" id="adminSection">
            <div class="form-section">
                <h4>Add New Admin</h4>
                <form id="adminForm">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="adminName" class="form-label">Full Name *</label>
                            <input type="text" class="form-control" id="adminName" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="adminEmail" class="form-label">Email *</label>
                            <input type="email" class="form-control" id="adminEmail" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="adminPhone" class="form-label">Phone *</label>
                            <input type="tel" class="form-control" id="adminPhone" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="adminPassword" class="form-label">Password *</label>
                            <input type="password" class="form-control" id="adminPassword" required>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary">Add Admin</button>
                </form>
            </div>

            <div class="data-table">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5>All Admins</h5>
                </div>
                <div class="table-responsive">
                    <table class="table" id="adminsTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Full Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Role</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Admin data will be inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
    </div>

    <!-- Customers Section -->
    <div id="customersSection">
      <div class="form-section">
        <h4>Add New Customer</h4>
        <form id="customerForm">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="customerName" class="form-label">Full Name *</label>
              <input type="text" class="form-control" id="customerName" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="customerEmail" class="form-label">Email *</label>
              <input type="email" class="form-control" id="customerEmail" required>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="customerPhone" class="form-label">Phone *</label>
              <input type="tel" class="form-control" id="customerPhone" required>
            </div>
             <div class="col-md-6 mb-3">
               <label for="customerPassword" class="form-label">Password *</label>
               <input type="password" class="form-control" id="customerPassword" required>
             </div>
           </div>
         
          <button type="submit" class="btn btn-primary">Add Customer</button>
        </form>
      </div>

      <div class="data-table">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h5>All Customers</h5>
        </div>
        <div class="table-responsive">
          <table class="table" id="customersTable">
            <thead>
              <tr>
                <th>ID</th>
                <th>Full Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Role</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <!-- Customer data will be inserted here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Products Section -->
    <div class="d-none" id="productsSection">
      <div class="form-section">
        <h4>Add New Product</h4>
       <form id="productForm">
      <div class="row">
        <div class="col-md-6 mb-3">
          <label for="productName" class="form-label">Product Name *</label>
          <input type="text" class="form-control" id="productName" required>
        </div>
        <div class="col-md-6 mb-3">
          <label for="productCustomer" class="form-label">Customer *</label>
          <select class="form-select" id="productCustomer" required>
            <option value="">Select Customer</option>
          </select>
        </div>
      </div>
      <div class="row">
        <div class="col-md-3 mb-3">
          <label for="productCategory" class="form-label">Category *</label>
          <select class="form-select" id="productCategory" required>
            <option value="">Select Category</option>
            <option value="vegetables">Vegetables</option>
            <option value="fruits">Fruits</option>
            <option value="grains">Grains</option>
            <option value="dairy">Dairy</option>
            <option value="beverages">Beverages</option>
            <option value="snacks">Snacks & Chips</option>
            <option value="bakery">Bakery</option>
            <option value="frozen">Frozen Foods</option>
            <option value="meat">Meat</option>
          </select>
        </div>
        <div class="col-md-3 mb-3">
          <label for="productQuantity" class="form-label">Quantity *</label>
          <input type="number" class="form-control" id="productQuantity" min="1" required>
        </div>
        <div class="col-md-3 mb-3">
          <label for="productPrice" class="form-label">Price (R) *</label>
          <input type="number" class="form-control" id="productPrice" min="0.01" step="0.01" required>
        </div>
        <div class="col-md-3 mb-3">
          <label for="productDate" class="form-label">Date *</label>
          <input type="date" class="form-control" id="productDate" required>
        </div>
      </div>
      <div class="mb-3">
        <label for="productDescription" class="form-label">Description</label>
        <textarea class="form-control" id="productDescription" rows="2"></textarea>
      </div>
      <div class="mb-3">
        <label for="productImage" class="form-label">Image</label>
        <input type="file" class="form-control" id="productImage" accept="image/*">
      </div>
      <button type="submit" class="btn btn-primary">Add Product</button>
    </form>
      </div>

      <div class="data-table">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h5>All Products</h5>
          <div>
            <input type="text" class="form-control form-control-sm" id="productSearch" placeholder="Search products..." style="width: 200px; display: inline-block;">
            <select class="form-control form-control-sm d-inline-block ms-2" id="productCategoryFilter" style="width: 150px;">
              <option value="">All Categories</option>
              <option value="vegetables">Vegetables</option>
              <option value="fruits">Fruits</option>
              <option value="grains">Grains</option>
              <option value="dairy">Dairy</option>
             <option value="beverages">Beverages</option>
            <option value="snacks">Snacks & Chips</option>
            <option value="bakery">Bakery</option>
            <option value="frozen">Frozen Foods</option>
            <option value="meat">Meat</option>
            </select>
            <input type="date" class="form-control form-control-sm d-inline-block ms-2" id="productDateFilter" style="width: 150px;">
            <button class="btn btn-sm btn-outline-primary ms-2" id="resetProductSearch">
              <i class="fas fa-sync-alt"></i> Reset
            </button>
          </div>
        </div>
        <div class="table-responsive">
          <table class="table" id="productsTable">
            <thead>
              <tr>
                 <th>Customer ID</th>
                <th>Product ID</th>
                <th>Customer</th>
                 <th>Name</th>
                  <th>Description</th>
                <th>Category</th>
                <th>Quantity</th>
                <th>Price (R)</th>               
                <th>Image</th>
                <th>Date</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <!-- Product data will be inserted here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
<!-- Orders Section -->
<div class="d-none" id="ordersSection">
  <div class="data-table">
    <h5>Orders</h5>
    
    <!-- Filter Controls -->
    <div class="row mb-3">
      <div class="col-md-4">
        <div class="input-group">
          <input type="text" id="orderSearch" class="form-control" placeholder="Search orders...">
          <button class="btn btn-outline-secondary" type="button" id="resetOrderSearch">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <div class="col-md-3">
        <select id="orderCategoryFilter" class="form-select">
          <option value="">All Categories</option>
          <option value="customer">Customer</option>
          <option value="product">Product</option>
          <option value="location">Location</option>
        </select>
      </div>
      <div class="col-md-3">
        <input type="date" id="orderDateFilter" class="form-control">
      </div>
      <div class="col-md-2">
        <button class="btn btn-primary w-100" id="addOrderBtn">
          <i class="fas fa-plus"></i> Add Order
        </button>
      </div>
    </div>
    
    <div class="table-responsive">
      <table class="table" id="ordersTable">
        <thead>
          <tr>
            <th>CustomerID</th>
            <th>ProductID</th>
            <th>OrderID</th>
            <th>FullName</th>
            <th>EmailAddress</th>
            <th>PhoneNumber</th>
            <th>DeliveryAddress</th>
            <th>Order Date</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <!-- Orders will be populated dynamically -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Add/Edit Order Modal -->
<div class="modal fade" id="orderModal" tabindex="-1" aria-labelledby="orderModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderModalLabel">Add New Order</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="orderForm">
          <div class="mb-3">
            <label for="orderCustomer" class="form-label">Customer</label>
            <select class="form-select" id="orderCustomer" required>
              <option value="">Select Customer</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="orderProduct" class="form-label">Product</label>
            <select class="form-select" id="orderProduct" required>
              <option value="">Select Product</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="orderDeliveryAddress" class="form-label">Delivery Address</label>
            <input type="text" class="form-control" id="orderDeliveryAddress" required>
          </div>
          <div class="mb-3">
            <label for="orderStatus" class="form-label">Status</label>
            <select class="form-select" id="orderStatus" required>
              <option value="Pending">Pending</option>
              <option value="Processing">Processing</option>
              <option value="Shipped">Shipped</option>
              <option value="Delivered">Delivered</option>
              <option value="Cancelled">Cancelled</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveOrderBtn">Save Order</button>
      </div>
    </div>
  </div>
</div>
      
  </div>

  <!-- Edit Modals -->
  <div class="modal fade" id="editCustomerModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title">Edit Customer</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="editCustomerForm"></div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="saveCustomerChanges">Save Changes</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Product Edit Modal -->
  <div class="modal fade" id="editProductModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title">Edit Product</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="editProductForm"></div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="saveProductChanges">Save Changes</button>
        </div>
      </div>
    </div>
  </div>

 
</body>

</html>
  <!-- Bootstrap 5 JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
// initial data - removed hardcoded data
let customers = [];
let products = [];
let orders = [
  {
    id: 1,
    customerId: 1,
    productId: 1,
    customerName: "Thabo Mokoena",
    email: "thabo@yahoo.co.za",
    phone: "+27 678345001",
    deliveryAddress: "Midrand_Johannesburg",
    orderDate: "2025-01-15",
    status: "Delivered"
  },
  {
    id: 2,
    customerId: 2,
    productId: 2,
    customerName: "Lerato Nkosi",
    email: "lerato@outlook.co.za",
    phone: "+27 723345002",
    deliveryAddress: "Khayelitsha,Cape Town",
    orderDate: "2025-01-20",
    status: "Shipped"
  },
  {
    id: 3,
    customerId: 3,
    productId: 3,
    customerName: "Sipho Dlamini",
    email: "sipho@icloud.co.za",
    phone: "+27 789345003",
    deliveryAddress: "Westville,Durban",
    orderDate: "2025-02-05",
    status: "Processing"
  },
  {
    id: 4,
    customerId: 4,
    productId: 4,
    customerName: "Nomvula Khumalo",
    email: "nomvula@gmail.co.za",
    phone: "+27 612345004",
    deliveryAddress: "EastRand_Gauteng",
    orderDate: "2025-02-10",
    status: "Pending"
  },
  {
    id: 5,
    customerId: 5,
    productId: 5,
    customerName: "Jabulani Mthembu",
    email: "jabulani@live.co.za",
    phone: "+27 315345005",
    deliveryAddress: "QwaQwa, Port Elizabeth",
    orderDate: "2025-02-15",
    status: "Delivered"
  }
];

// Hardcoded Admin data with African names
let admins = [
    { id: 1, name: "Lerato", surname: "Moloi", password: "Lerato@2024" },
    { id: 2, name: "Thabo", surname: "Mokoena", password: "Thabo#123" },
    { id: 3, name: "Nompumelelo", surname: "Zulu", password: "Nompumelelo$456" },
    { id: 4, name: "Sipho", surname: "Dlamini", password: "Sipho*789" },
    { id: 5, name: "Zanele", surname: "Khumalo", password: "Zanele!101" }
];

const sidebarLinks = document.querySelectorAll('.sidebar .nav-link[data-section]');
const sections = {
    customers: document.getElementById('customersSection'),
    products: document.getElementById('productsSection'),
    admin: document.getElementById('adminSection'),
    orders: document.getElementById('ordersSection')
};

// Default show customers
Object.values(sections).forEach(s => {
    if (s) s.classList.add('d-none');
});
if (sections.customers) sections.customers.classList.remove('d-none');

sidebarLinks.forEach(link => {
    link.addEventListener('click', function (e) {
        e.preventDefault();
        const sectionId = this.dataset.section;

        Object.values(sections).forEach(sec => {
            if (sec) sec.classList.add('d-none');
        });
        
        if (sections[sectionId]) {
            sections[sectionId].classList.remove('d-none');
        }

        sidebarLinks.forEach(l => l.classList.remove('active'));
        this.classList.add('active');
    });
});

// Admin filtering helper - FIXED
function adminMatchesFilters(admin) {
    const searchInput = document.getElementById('adminSearch');
    const categorySelect = document.getElementById('adminCategoryFilter');
    
    if (!searchInput || !categorySelect) return true;
    
    const search = searchInput.value.trim().toLowerCase();
    const category = categorySelect.value;
    
    if (search) {
        if (category === 'name') {
            if (!admin.name.toLowerCase().includes(search)) return false;
        } else if (category === 'surname') {
            if (!admin.surname.toLowerCase().includes(search)) return false;
        } else if (category === 'password') {
            if (!admin.password.toLowerCase().includes(search)) return false;
        } else {
            // Search all fields
            const combined = `${admin.name} ${admin.surname} ${admin.password}`.toLowerCase();
            if (!combined.includes(search)) return false;
        }
    }
    
    return true;
}

// Render Admin table - FIXED
function renderAdminsTable() {
    const tableBody = document.querySelector('#adminsTable tbody');
    if (!tableBody) {
        console.error('Admin table body not found');
        return;
    }
    
    tableBody.innerHTML = '';
    
    let hasResults = false;
    
    admins.forEach(admin => {
        if (!adminMatchesFilters(admin)) return;
        
        hasResults = true;
        tableBody.innerHTML += `
            <tr>
                <td>${admin.id}</td>
                <td>${admin.name}</td>
                <td>${admin.surname}</td>
                <td>${admin.password}</td>
                <td>
                    <button class="btn btn-sm btn-outline-primary edit-admin" data-id="${admin.id}">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                    <button class="btn btn-sm btn-outline-danger delete-admin" data-id="${admin.id}">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </td>
            </tr>
        `;
    });

    if (!hasResults) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="5" class="text-center text-muted py-4">
                    No admins found matching your search criteria.
                </td>
            </tr>
        `;
    }

    // Attach handlers - FIXED
    document.querySelectorAll('.edit-admin').forEach(btn => {
        btn.addEventListener('click', openEditAdminModal);
    });
    document.querySelectorAll('.delete-admin').forEach(btn => {
        btn.addEventListener('click', deleteAdmin);
    });
}

// Delete Admin - FIXED
function deleteAdmin(e) {
    const id = parseInt(e.currentTarget.dataset.id, 10);
    const idx = admins.findIndex(a => a.id === id);
    if (idx === -1) return;
    
    if (confirm(`Are you sure you want to delete admin ${admins[idx].name} ${admins[idx].surname}?`)) {
        const removed = admins.splice(idx, 1)[0];
        renderAdminsTable();
        alert(`admin_${removed.id} (${removed.name} ${removed.surname}) deleted.`);
    }
}

// Edit Admin modal logic - FIXED
let editAdminModal = null;

function initializeAdminModal() {
    const editAdminModalEl = document.getElementById('editAdminModal');
    if (editAdminModalEl && !editAdminModal) {
        editAdminModal = new bootstrap.Modal(editAdminModalEl, { keyboard: true });
        
        // Initialize save button event listener
        const saveButton = document.getElementById('saveAdminChanges');
        if (saveButton) {
            saveButton.addEventListener('click', saveAdminChanges);
        }
    }
}

function openEditAdminModal(e) {
    initializeAdminModal();
    
    const id = parseInt(e.currentTarget.dataset.id, 10);
    const admin = admins.find(a => a.id === id);
    if (!admin || !editAdminModal) {
        console.error('Admin not found or modal not initialized');
        return;
    }

    const formHtml = `
        <form id="editAdminInnerForm">
            <div class="mb-3">
                <label class="form-label">First Name</label>
                <input type="text" id="editAdminName" class="form-control" value="${escapeHtml(admin.name)}" required>
            </div>
            <div class="mb-3">
                <label class="form-label">Surname</label>
                <input type="text" id="editAdminSurname" class="form-control" value="${escapeHtml(admin.surname)}" required>
            </div>
            <div class="mb-3">
                <label class="form-label">Password</label>
                <input type="password" id="editAdminPassword" class="form-control" value="${escapeHtml(admin.password)}" required>
            </div>
        </form>
    `;
    
    const editAdminForm = document.getElementById('editAdminForm');
    if (editAdminForm) {
        editAdminForm.innerHTML = formHtml;
    }
    
    const saveButton = document.getElementById('saveAdminChanges');
    if (saveButton) {
        saveButton.dataset.id = id;
    }
    
    editAdminModal.show();
}

// Save Admin changes - FIXED
function saveAdminChanges() {
    const saveButton = document.getElementById('saveAdminChanges');
    if (!saveButton) return;
    
    const id = parseInt(saveButton.dataset.id, 10);
    const admin = admins.find(a => a.id === id);
    if (!admin) return;

    const nameInput = document.getElementById('editAdminName');
    const surnameInput = document.getElementById('editAdminSurname');
    const passwordInput = document.getElementById('editAdminPassword');
    
    if (!nameInput || !surnameInput || !passwordInput) return;

    const name = nameInput.value.trim();
    const surname = surnameInput.value.trim();
    const password = passwordInput.value;

    if (!name || !surname || !password) {
        alert('Please fill in all admin fields.');
        return;
    }

    // update
    admin.name = name;
    admin.surname = surname;
    admin.password = password;

    renderAdminsTable();
    if (editAdminModal) {
        editAdminModal.hide();
    }
    alert(`admin_${id} (${name} ${surname}) updated successfully.`);
}

// Reset admin search - FIXED
function setupAdminEventListeners() {
    const resetButton = document.getElementById('resetAdminSearch');
    const searchInput = document.getElementById('adminSearch');
    const categoryFilter = document.getElementById('adminCategoryFilter');
    
    if (resetButton) {
        resetButton.addEventListener('click', function () {
            if (searchInput) searchInput.value = '';
            if (categoryFilter) categoryFilter.value = '';
            renderAdminsTable();
        });
    }
    
    if (searchInput) {
        searchInput.addEventListener('input', renderAdminsTable);
    }
    
    if (categoryFilter) {
        categoryFilter.addEventListener('change', renderAdminsTable);
    }
}

// Utility: next IDs
function nextCustomerId() {
    return customers.length ? Math.max(...customers.map(c => c.id)) + 1 : 1;
}
function nextProductId() {
    return products.length ? Math.max(...products.map(p => p.id)) + 1 : 1;
}
function nextOrderId() {
    return orders.length ? Math.max(...orders.map(o => o.id)) + 1 : 1;
}

// Populate product customer select
function populateProductCustomerSelect(selectElementId = 'productCustomer') {
    const select = document.getElementById(selectElementId);
    if (!select) return;
    const currentValue = select.value;
    select.innerHTML = `<option value="">Select Customer</option>`;
    customers.forEach(c => {
        const opt = document.createElement('option');
        opt.value = c.id;
        opt.textContent = `${c.name} (ID: ${c.id})`;
        select.appendChild(opt);
    });
    // try to restore previous selection if still valid
    if (currentValue) select.value = currentValue;
}

// Populate order dropdowns
function populateOrderDropdowns() {
    const customerSelect = document.getElementById('orderCustomer');
    const productSelect = document.getElementById('orderProduct');
    
    if (customerSelect) {
        customerSelect.innerHTML = '<option value="">Select Customer</option>';
        customers.forEach(c => {
            const opt = document.createElement('option');
            opt.value = c.id;
            opt.textContent = `${c.name} (ID: ${c.id})`;
            customerSelect.appendChild(opt);
        });
    }
    
    if (productSelect) {
        productSelect.innerHTML = '<option value="">Select Product</option>';
        products.forEach(p => {
            const opt = document.createElement('option');
            opt.value = p.id;
            opt.textContent = `${p.name} (ID: ${p.id})`;
            productSelect.appendChild(opt);
        });
    }
}

// Filtering helpers
function customerMatchesFilters(customer) {
    const search = document.getElementById('customerSearch')?.value.trim().toLowerCase() || '';
    const cat = document.getElementById('customerCategoryFilter')?.value || '';
    const dateFilter = document.getElementById('customerDateFilter')?.value || '';

    // search across name, email, phone, location
    if (search) {
        const combined = `${customer.name} ${customer.email} ${customer.phone} ${customer.location}`.toLowerCase();
        if (!combined.includes(search)) return false;
    }

    // category by age
    if (cat) {
        if (cat === 'small' && !(customer.age >= 18 && customer.age <= 25)) return false;
        if (cat === 'medium' && !(customer.age >= 26 && customer.age <= 40)) return false;
        if (cat === 'large' && !(customer.age > 40)) return false;
    }

    // date filter
    if (dateFilter) {
        if (!customer.joinDate) return false;
        const custDate = new Date(customer.joinDate);
        const filterDate = new Date(dateFilter);
        // Only match same day
        if (custDate.toISOString().slice(0, 10) !== filterDate.toISOString().slice(0, 10)) return false;
    }

    return true;
}

function productMatchesFilters(product) {
    const search = document.getElementById('productSearch')?.value.trim().toLowerCase() || '';
    const cat = document.getElementById('productCategoryFilter')?.value || '';
    const dateFilter = document.getElementById('productDateFilter')?.value || '';

    if (search) {
        const combined = `${product.name} ${product.customerName} ${product.category} ${product.description}`.toLowerCase();
        if (!combined.includes(search)) return false;
    }

    if (cat && product.category !== cat) return false;

    if (dateFilter) {
        if (!product.dateAdded) return false;
        const prodDate = new Date(product.dateAdded);
        const filterDate = new Date(dateFilter);
        if (prodDate.toISOString().slice(0, 10) !== filterDate.toISOString().slice(0, 10)) return false;
    }

    return true;
}

function orderMatchesFilters(order) {
    const search = document.getElementById('orderSearch')?.value.trim().toLowerCase() || '';
    const category = document.getElementById('orderCategoryFilter')?.value || '';
    const dateFilter = document.getElementById('orderDateFilter')?.value || '';

    // Search filter
    if (search) {
        const combined = `${order.customerName} ${order.email} ${order.phone} ${order.deliveryAddress} ${order.status}`.toLowerCase();
        if (!combined.includes(search)) return false;
    }

    // Category filter
    if (category) {
        if (category === 'customer' && !order.customerName.toLowerCase().includes(search)) return false;
        if (category === 'product' && !order.productId.toString().includes(search)) return false;
        if (category === 'location' && !order.deliveryAddress.toLowerCase().includes(search)) return false;
    }

    // Date filter
    if (dateFilter) {
        if (!order.orderDate) return false;
        const orderDate = new Date(order.orderDate);
        const filterDate = new Date(dateFilter);
        if (orderDate.toISOString().slice(0, 10) !== filterDate.toISOString().slice(0, 10)) return false;
    }

    return true;
}

// Render functions attach event listeners for dynamic buttons
function renderCustomersTable() {
    const tableBody = document.querySelector('#customersTable tbody');
    if (!tableBody) return;
    
    tableBody.innerHTML = '';

    if (customers.length === 0) {
        tableBody.innerHTML = `
              <tr>
                <td colspan="8" class="text-center text-muted py-4">
                  No customers found. Add your first customer above.
                </td>
              </tr>
          `;
        return;
    }

    customers.forEach(customer => {
        if (!customerMatchesFilters(customer)) return;
        tableBody.innerHTML += `
              <tr>
                <td>${customer.id}</td>
                <td>${customer.name}</td>
                <td>${customer.email}</td>
                <td>${customer.phone}</td>
                <td>${customer.location}</td>
                <td>${customer.age}</td>
                <td>${new Date(customer.joinDate).toLocaleDateString()}</td>
                <td>
                  <button class="btn btn-sm btn-outline-primary edit-customer" data-id="${customer.id}">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-danger delete-customer" data-id="${customer.id}">
                    <i class="fas fa-trash"></i>
                  </button>
                </td>
              </tr>
          `;
    });

    // Attach handlers
    document.querySelectorAll('.edit-customer').forEach(btn => {
        btn.addEventListener('click', openEditCustomerModal);
    });
    document.querySelectorAll('.delete-customer').forEach(btn => {
        btn.addEventListener('click', deleteCustomer);
    });

    // Also refresh product customer select in case customers changed
    populateProductCustomerSelect();
}

function renderProductsTable() {
    const tableBody = document.querySelector('#productsTable tbody');
    if (!tableBody) return;
    
    tableBody.innerHTML = '';

    if (products.length === 0) {
        tableBody.innerHTML = `
              <tr>
                <td colspan="11" class="text-center text-muted py-4">
                  No products found. Add your first product above.
                </td>
              </tr>
          `;
        return;
    }

    products.forEach(product => {
        if (!productMatchesFilters(product)) return;
        tableBody.innerHTML += `
  <tr>
    <td>${product.customerId}</td>
    <td>${product.id}</td>
    <td>${product.customerName}</td>
     <td>${product.name}</td>
 <td>${product.description || ''}</td>
    <td>${product.category}</td>
    <td>${product.quantity}</td>
    <td>R${product.price.toFixed(2)}</td>
    <td>${product.image ? `<img src="${product.image}" alt="Product Image" style="width:60px; height:60px; object-fit:cover;">` : ''}</td>
    <td>${new Date(product.dateAdded).toLocaleDateString()}</td>
    <td>
      <button class="btn btn-sm btn-outline-primary edit-product" data-id="${product.id}">
        <i class="fas fa-edit"></i>
      </button>
      <button class="btn btn-sm btn-outline-danger delete-product" data-id="${product.id}">
        <i class="fas fa-trash"></i>
      </button>
    </td>
  </tr>
`;

    });

    document.querySelectorAll('.edit-product').forEach(btn => {
        btn.addEventListener('click', openEditProductModal);
    });
    document.querySelectorAll('.delete-product').forEach(btn => {
        btn.addEventListener('click', deleteProduct);
    });
}

function renderOrdersTable() {
    const tableBody = document.querySelector('#ordersTable tbody');
    if (!tableBody) return;
    
    tableBody.innerHTML = '';

    if (orders.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="10" class="text-center text-muted py-4">
                    No orders found. Add your first order above.
                </td>
            </tr>
        `;
        return;
    }

    orders.forEach(order => {
        if (!orderMatchesFilters(order)) return;
        
        // Determine status badge class
        let statusClass = 'bg-secondary';
        if (order.status === 'Delivered') statusClass = 'bg-success';
        else if (order.status === 'Shipped') statusClass = 'bg-primary';
        else if (order.status === 'Processing') statusClass = 'bg-warning';
        else if (order.status === 'Pending') statusClass = 'bg-info';
        else if (order.status === 'Cancelled') statusClass = 'bg-danger';
        
        tableBody.innerHTML += `
            <tr>
                <td>${order.customerId}</td>
                <td>${order.productId}</td>
                <td>${order.id}</td>
                <td>${order.customerName}</td>
                <td>${order.email}</td>
                <td>${order.phone}</td>
                <td>${order.deliveryAddress}</td>
                <td>${new Date(order.orderDate).toLocaleDateString()}</td>
                <td><span class="badge ${statusClass}">${order.status}</span></td>
                <td>
                    <button class="btn btn-sm btn-outline-primary edit-order" data-id="${order.id}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger delete-order" data-id="${order.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            </tr>
        `;
    });

    // Attach event handlers
    document.querySelectorAll('.edit-order').forEach(btn => {
        btn.addEventListener('click', openEditOrderModal);
    });
    document.querySelectorAll('.delete-order').forEach(btn => {
        btn.addEventListener('click', deleteOrder);
    });
}

// Open add order modal
function openAddOrderModal() {
    const modal = new bootstrap.Modal(document.getElementById('orderModal'));
    const modalTitle = document.getElementById('orderModalLabel');
    const saveButton = document.getElementById('saveOrderBtn');
    
    modalTitle.textContent = 'Add New Order';
    saveButton.textContent = 'Save Order';
    saveButton.dataset.mode = 'add';
    
    // Reset form
    document.getElementById('orderForm').reset();
    
    // Populate dropdowns
    populateOrderDropdowns();
    
    modal.show();
}

// Open edit order modal
function openEditOrderModal(e) {
    const id = parseInt(e.currentTarget.dataset.id, 10);
    const order = orders.find(o => o.id === id);
    if (!order) return;
    
    const modal = new bootstrap.Modal(document.getElementById('orderModal'));
    const modalTitle = document.getElementById('orderModalLabel');
    const saveButton = document.getElementById('saveOrderBtn');
    
    modalTitle.textContent = 'Edit Order';
    saveButton.textContent = 'Update Order';
    saveButton.dataset.mode = 'edit';
    saveButton.dataset.id = id;
    
    // Populate form with order data
    populateOrderDropdowns();
    document.getElementById('orderCustomer').value = order.customerId;
    document.getElementById('orderProduct').value = order.productId;
    document.getElementById('orderDeliveryAddress').value = order.deliveryAddress;
    document.getElementById('orderStatus').value = order.status;
    
    modal.show();
}

// Save order
function saveOrder() {
    const saveButton = document.getElementById('saveOrderBtn');
    const mode = saveButton.dataset.mode;
    const id = mode === 'edit' ? parseInt(saveButton.dataset.id, 10) : nextOrderId();
    
    const customerId = parseInt(document.getElementById('orderCustomer').value, 10);
    const productId = parseInt(document.getElementById('orderProduct').value, 10);
    const deliveryAddress = document.getElementById('orderDeliveryAddress').value.trim();
    const status = document.getElementById('orderStatus').value;
    
    // Validate
    if (!customerId || !productId || !deliveryAddress || !status) {
        alert('Please fill in all required fields.');
        return;
    }
    
    // Find customer and product details
    const customer = customers.find(c => c.id === customerId);
    const product = products.find(p => p.id === productId);
    
    if (!customer || !product) {
        alert('Invalid customer or product selected.');
        return;
    }
    
    const orderData = {
        id,
        customerId,
        productId,
        customerName: customer.name,
        email: customer.email,
        phone: customer.phone,
        deliveryAddress,
        orderDate: new Date().toISOString().slice(0, 10),
        status
    };
    
    if (mode === 'add') {
        orders.push(orderData);
    } else {
        const index = orders.findIndex(o => o.id === id);
        if (index !== -1) {
            // Preserve original order date when editing
            orderData.orderDate = orders[index].orderDate;
            orders[index] = orderData;
        }
    }
    
    renderOrdersTable();
    bootstrap.Modal.getInstance(document.getElementById('orderModal')).hide();
    
    alert(`Order ${mode === 'add' ? 'added' : 'updated'} successfully.`);
}

// Delete order
function deleteOrder(e) {
    const id = parseInt(e.currentTarget.dataset.id, 10);
    const order = orders.find(o => o.id === id);
    if (!order) return;
    
    if (confirm(`Are you sure you want to delete order #${order.id} for ${order.customerName}?`)) {
        const index = orders.findIndex(o => o.id === id);
        if (index !== -1) {
            orders.splice(index, 1);
            renderOrdersTable();
            alert(`Order #${id} deleted successfully.`);
        }
    }
}

// Setup order event listeners
function setupOrderEventListeners() {
    // Add order button
    const addOrderBtn = document.getElementById('addOrderBtn');
    if (addOrderBtn) {
        addOrderBtn.addEventListener('click', openAddOrderModal);
    }
    
    // Save order button
    const saveOrderBtn = document.getElementById('saveOrderBtn');
    if (saveOrderBtn) {
        saveOrderBtn.addEventListener('click', saveOrder);
    }
    
    // Order search and filter
    const resetOrderSearch = document.getElementById('resetOrderSearch');
    const orderSearch = document.getElementById('orderSearch');
    const orderCategoryFilter = document.getElementById('orderCategoryFilter');
    const orderDateFilter = document.getElementById('orderDateFilter');
    
    if (resetOrderSearch) {
        resetOrderSearch.addEventListener('click', function() {
            if (orderSearch) orderSearch.value = '';
            if (orderCategoryFilter) orderCategoryFilter.value = '';
            if (orderDateFilter) orderDateFilter.value = '';
            renderOrdersTable();
        });
    }
    
    if (orderSearch) {
        orderSearch.addEventListener('input', renderOrdersTable);
    }
    
    if (orderCategoryFilter) {
        orderCategoryFilter.addEventListener('change', renderOrdersTable);
    }
    
    if (orderDateFilter) {
        orderDateFilter.addEventListener('change', renderOrdersTable);
    }
}

// Escape helper to prevent markup issues when inserting into innerHTML
function escapeHtml(text) {
    if (text === null || text === undefined) return '';
    return text.toString()
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
}

// Initial population - FIXED
document.addEventListener('DOMContentLoaded', function() {
    populateProductCustomerSelect();
    renderCustomersTable();
    renderProductsTable();
    setupAdminEventListeners(); // Setup admin event listeners
    renderAdminsTable(); // Initialize admin table
    initializeAdminModal(); // Initialize admin modal
    
    // Add orders initialization
    renderOrdersTable();
    setupOrderEventListeners();
});
</script>
<!-- Custom CSS -->
 <style>
   :root {
     --bg-dark: #1a2131;
     --btn-primary: #2869ff;
     --text-light: #ffffff;
     --card-bg: #2a3447;
     --success: #28a745;
     --warning: #ffc107;
     --danger: #dc3545;
   }
   body {
     font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
     background-color: #f5f5f5;
   }
   /* Sidebar */
   .sidebar {
     background: var(--bg-dark);
     color: var(--text-light);
     height: 100vh;
     position: fixed;
     border-right: 1px solid rgba(255, 255, 255, 0.1);
   }
   .sidebar .nav-link {
     color: rgba(255, 255, 255, 0.8);
     margin: 5px 0;
     border-radius: 5px;
     transition: all 0.3s;
   }
   .sidebar .nav-link:hover, .sidebar .nav-link.active {
     background: var(--btn-primary);
     color: white;
   }
   .sidebar .nav-link i {
     margin-right: 10px;
   }
   /* Main Content */
   .main-content {
     margin-left: 250px;
     padding: 20px;
     min-height: 100vh;
   }
   /* Cards */
   .stats-card {
     border: none;
     border-radius: 10px;
     padding: 20px;
     color: white;
     transition: transform 0.3s;
   }
   .stats-card:hover {
     transform: translateY(-5px);
   }
   /* Tables */
   .data-table {
     background: white;
     border-radius: 10px;
     padding: 20px;
     box-shadow: 0 2px 4px rgba(0,0,0,0.1);
   }
   .status-badge {
     padding: 5px 10px;
     border-radius: 20px;
     font-size: 12px;
     font-weight: bold;
   }
   .status-pending {
     background: #fff3cd;
     color: #856404;
   }
   .status-completed {
     background: #d4edda;
     color: #155724;
   }
   /* Forms */
   .form-section {
     background: white;
     border-radius: 10px;
     padding: 20px;
     margin-bottom: 20px;
     box-shadow: 0 2px 4px rgba(0,0,0,0.1);
   }
   /* Responsive */
   
 </style>

@section Scripts {
    <script src="~/js/auth.js"></script>
    <script src="~/js/Admin.js"></script>
}
